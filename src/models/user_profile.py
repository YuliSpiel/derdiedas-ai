"""
ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Î∞è ÎÖ∏Ìä∏Î∂Å Îç∞Ïù¥ÌÑ∞ Î™®Îç∏
"""

from dataclasses import dataclass, field
from typing import List, Dict, Optional
from datetime import datetime
import json
from pathlib import Path


@dataclass
class UserProfile:
    """ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ"""

    nickname: str = "ÌïôÏäµÏûê"
    level: str = "ÎØ∏Ï∏°Ï†ï"  # Ïòà: "B1-Ï§ëÎ∞ò"
    total_stamps: int = 0
    consecutive_days: int = 0
    interests: List[str] = field(default_factory=lambda: ["Ïó¨Ìñâ", "ÏùåÏïÖ", "IT"])
    goals: List[str] = field(default_factory=lambda: ["ÌöåÌôî", "Î¨∏Î≤ï"])
    last_active: Optional[str] = None
    profile_icon: str = "üéì"
    profile_bg_color: str = "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"  # Î∞∞Í≤Ω Í∑∏ÎùºÎîîÏñ∏Ìä∏
    skill_proficiency: Dict[str, float] = field(default_factory=dict)  # Ïä§ÌÇ¨Î≥Ñ ÏàôÎ†®ÎèÑ (0-100)
    skill_learning_count: Dict[str, int] = field(default_factory=dict)  # Ïä§ÌÇ¨Î≥Ñ ÌïôÏäµ ÌöüÏàò
    created_at: Optional[str] = None

    def to_dict(self) -> Dict:
        """ÎîïÏÖîÎÑàÎ¶¨Î°ú Î≥ÄÌôò"""
        return {
            "nickname": self.nickname,
            "level": self.level,
            "total_stamps": self.total_stamps,
            "consecutive_days": self.consecutive_days,
            "interests": self.interests,
            "goals": self.goals,
            "last_active": self.last_active,
            "profile_icon": self.profile_icon,
            "profile_bg_color": self.profile_bg_color,
            "skill_proficiency": self.skill_proficiency,
            "skill_learning_count": self.skill_learning_count,
            "created_at": self.created_at,
        }

    @classmethod
    def from_dict(cls, data: Dict) -> "UserProfile":
        """ÎîïÏÖîÎÑàÎ¶¨ÏóêÏÑú ÏÉùÏÑ±"""
        return cls(
            nickname=data.get("nickname", "ÌïôÏäµÏûê"),
            level=data.get("level", "ÎØ∏Ï∏°Ï†ï"),
            total_stamps=data.get("total_stamps", 0),
            consecutive_days=data.get("consecutive_days", 0),
            interests=data.get("interests", ["Ïó¨Ìñâ", "ÏùåÏïÖ", "IT"]),
            goals=data.get("goals", ["ÌöåÌôî", "Î¨∏Î≤ï"]),
            last_active=data.get("last_active"),
            profile_icon=data.get("profile_icon", "üéì"),
            profile_bg_color=data.get("profile_bg_color", "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"),
            skill_proficiency=data.get("skill_proficiency", {}),
            skill_learning_count=data.get("skill_learning_count", {}),
            created_at=data.get("created_at"),
        )


@dataclass
class Notebook:
    """ÌïôÏäµ ÎÖ∏Ìä∏Î∂Å"""

    id: str
    title: str  # Ïòà: "Definite article ‚Äì nominative"
    category: str  # "Grammar", "Expression" Îì±
    topic: str  # "Articles", "Verbs" Îì±
    total_sessions: int = 0
    last_studied: Optional[str] = None
    created_at: Optional[str] = None
    is_recommended: bool = False  # Ï∂îÏ≤ú ÎÖ∏Ìä∏Î∂Å Ïó¨Î∂Ä (Ï†ÅÏùëÌòï Ï£ºÏ†ú ÏÑ†Ï†ï)
    skill_id: Optional[str] = None  # ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù Ïä§ÌÇ¨ ID (Í≥†Ï†ï Ï£ºÏ†ú)

    def to_dict(self) -> Dict:
        """ÎîïÏÖîÎÑàÎ¶¨Î°ú Î≥ÄÌôò"""
        return {
            "id": self.id,
            "title": self.title,
            "category": self.category,
            "topic": self.topic,
            "total_sessions": self.total_sessions,
            "last_studied": self.last_studied,
            "created_at": self.created_at,
            "is_recommended": self.is_recommended,
            "skill_id": self.skill_id,
        }

    @classmethod
    def from_dict(cls, data: Dict) -> "Notebook":
        """ÎîïÏÖîÎÑàÎ¶¨ÏóêÏÑú ÏÉùÏÑ±"""
        return cls(
            id=data["id"],
            title=data["title"],
            category=data["category"],
            topic=data["topic"],
            total_sessions=data.get("total_sessions", 0),
            last_studied=data.get("last_studied"),
            created_at=data.get("created_at"),
            is_recommended=data.get("is_recommended", False),
            skill_id=data.get("skill_id"),
        )


class ProfileManager:
    """ÌîÑÎ°úÌïÑ Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""

    def __init__(self, data_dir: str = "data"):
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        self.profile_file = self.data_dir / "user_profile.json"
        self.notebooks_file = self.data_dir / "notebooks.json"

    def load_profile(self) -> UserProfile:
        """ÌîÑÎ°úÌïÑ Î°úÎìú"""
        if self.profile_file.exists():
            with open(self.profile_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                return UserProfile.from_dict(data)
        else:
            # Í∏∞Î≥∏ ÌîÑÎ°úÌïÑ ÏÉùÏÑ±
            profile = UserProfile(created_at=datetime.now().isoformat())
            self.save_profile(profile)
            return profile

    def save_profile(self, profile: UserProfile):
        """ÌîÑÎ°úÌïÑ Ï†ÄÏû•"""
        profile.last_active = datetime.now().isoformat()
        with open(self.profile_file, "w", encoding="utf-8") as f:
            json.dump(profile.to_dict(), f, ensure_ascii=False, indent=2)

    def update_level_from_test(self, level: str, skill_proficiency: Dict[str, float] = None):
        """Î†àÎ≤® ÌÖåÏä§Ìä∏ Í≤∞Í≥º Î∞òÏòÅ (Î†àÎ≤® + Ïä§ÌÇ¨ ÏàôÎ†®ÎèÑ)"""
        profile = self.load_profile()
        profile.level = level

        # Ïä§ÌÇ¨ ÏàôÎ†®ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
        if skill_proficiency:
            profile.skill_proficiency = skill_proficiency

        self.save_profile(profile)

    def load_notebooks(self) -> List[Notebook]:
        """ÎÖ∏Ìä∏Î∂Å Î™©Î°ù Î°úÎìú"""
        if self.notebooks_file.exists():
            with open(self.notebooks_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                return [Notebook.from_dict(nb) for nb in data]
        else:
            # Í∏∞Î≥∏ ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ±
            default_notebooks = self._create_default_notebooks()
            self.save_notebooks(default_notebooks)
            return default_notebooks

    def save_notebooks(self, notebooks: List[Notebook]):
        """ÎÖ∏Ìä∏Î∂Å Î™©Î°ù Ï†ÄÏû•"""
        with open(self.notebooks_file, "w", encoding="utf-8") as f:
            json.dump(
                [nb.to_dict() for nb in notebooks], f, ensure_ascii=False, indent=2
            )

    def add_notebook(self, notebook: Notebook):
        """ÎÖ∏Ìä∏Î∂Å Ï∂îÍ∞Ä"""
        notebooks = self.load_notebooks()
        notebooks.append(notebook)
        self.save_notebooks(notebooks)

    def delete_notebook(self, notebook_id: str):
        """ÎÖ∏Ìä∏Î∂Å ÏÇ≠Ï†ú"""
        notebooks = self.load_notebooks()
        notebooks = [nb for nb in notebooks if nb.id != notebook_id]
        self.save_notebooks(notebooks)

    def update_notebook_session(self, notebook_id: str):
        """ÎÖ∏Ìä∏Î∂Å ÌïôÏäµ ÏÑ∏ÏÖò ÏóÖÎç∞Ïù¥Ìä∏"""
        notebooks = self.load_notebooks()
        for nb in notebooks:
            if nb.id == notebook_id:
                nb.total_sessions += 1
                nb.last_studied = datetime.now().strftime("%m/%d")
                break
        self.save_notebooks(notebooks)

        # ÌîÑÎ°úÌïÑ Ïä§ÌÉ¨ÌîÑÎèÑ Ï¶ùÍ∞Ä
        profile = self.load_profile()
        profile.total_stamps += 1
        self.save_profile(profile)

    def _create_default_notebooks(self) -> List[Notebook]:
        """Í∏∞Î≥∏ ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ± (Ï∂îÏ≤úÏö©)"""
        # Ïä§ÌÇ¨ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò Ï∂îÏ≤ú ÎÖ∏Ìä∏Î∂Å ÏÉùÏÑ±
        try:
            from pathlib import Path
            import csv

            skill_tree_path = Path("data/grammar_ontology/skill_tree.csv")
            if skill_tree_path.exists():
                with open(skill_tree_path, "r", encoding="utf-8") as f:
                    reader = csv.DictReader(f)
                    skills = list(reader)

                # A1 Î†àÎ≤® Ïä§ÌÇ¨ Ï§ë ÏùºÎ∂ÄÎ•º Ï∂îÏ≤ú ÎÖ∏Ìä∏Î∂ÅÏúºÎ°ú ÏÉùÏÑ±
                recommended_skills = [s for s in skills if s['cefr'] == 'A1'][:3]

                notebooks = []
                for skill in recommended_skills:
                    notebooks.append(Notebook(
                        id=f"nb_{skill['skill_id']}",
                        title=skill['name'],  # Ïä§ÌÇ¨ Ïù¥Î¶ÑÏùÑ ÌÉÄÏù¥ÌãÄÎ°ú ÏßÅÏ†ë ÏÇ¨Ïö©
                        category="Grammar",
                        topic=skill['area'],
                        is_recommended=True,
                        created_at=datetime.now().isoformat(),
                    ))

                return notebooks if notebooks else self._fallback_notebooks()
            else:
                return self._fallback_notebooks()
        except Exception as e:
            print(f"Ïä§ÌÇ¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {e}")
            return self._fallback_notebooks()

    def _fallback_notebooks(self) -> List[Notebook]:
        """Í∏∞Î≥∏ ÎÖ∏Ìä∏Î∂Å (Ìè¥Î∞±)"""
        return [
            Notebook(
                id="nb_grammar_articles",
                title="Definite article ‚Äì nominative",
                category="Grammar",
                topic="Articles",
                is_recommended=True,
                created_at=datetime.now().isoformat(),
            ),
            Notebook(
                id="nb_grammar_verbs",
                title="Present tense ‚Äì regular verbs",
                category="Grammar",
                topic="Verbs",
                is_recommended=True,
                created_at=datetime.now().isoformat(),
            ),
        ]
